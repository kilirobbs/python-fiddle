#!/usr/bin/env python
from subprocess import PIPE, Popen, STDOUT

process = Popen("ls -l", stdout=PIPE, stdin=PIPE, stderr=STDOUT, shell=True)

#process.poll() # Check if child process has terminated. Set and return .returncode attribute.
#process.wait() # Wait for child process to terminate. Set and return .returncode attribute.
print "communicate()=", process.communicate()  # communicate() returns a tuple (stdoutdata, stderrdata).
print "returncode=", process.returncode  # called after .communicate()

print "\n"
process = Popen("error command", stdout=PIPE, stdin=PIPE, stderr=STDOUT, shell=True)


print "communicate()=", process.communicate()  # communicate() returns a tuple (stdoutdata, stderrdata).
print "returncode=", process.returncode  # called after .communicate()


def shell(command):
    process = Popen(command, stdout=PIPE, stdin=PIPE, stderr=STDOUT, shell=True)
    r = process.communicate()
    if process.returncode != 0:
        raise SystemError(r[0])
    else:
        # remove line break
        return "\n".join(r[0].splitlines()[0::-1])
try:
    shell("ls test")
except Exception, e:
    print "exception: ", str(e)


print "!%s!" % shell("echo '1'")
